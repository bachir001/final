{"ast":null,"code":"var _jsxFileName = \"/var/www/html/MechanicalDelevery/react _part/src/Components/session/SessionProvider.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport SessionContext from './SessionContext'; // import { setCookie, getCookie, removeCookie } from '../../cookies';\n\nimport swal from 'sweetalert';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function SessionProvider({\n  children\n}) {\n  _s();\n\n  const [session, setValue] = useState({\n    user: {\n      access_token: getCookie('access_token'),\n      role: getCookie('role')\n    }\n  });\n  useEffect(() => {\n    function initializeSession() {\n      let id = getCookie('id');\n      let access_token = getCookie('access_token');\n      if (access_token) fetch(`https://reqres.in/api/users/${id}`, {\n        headers: {\n          'access_token': access_token\n        }\n      }).then(res => res.json()).then(res => {\n        let user = { ...res.data,\n          access_token\n        };\n        updateSession({\n          user\n        });\n      });\n    }\n\n    initializeSession();\n  }, []);\n\n  function updateSession(nextSession) {\n    let value = typeof nextSession === \"function\" ? nextSession : prevSession => ({ ...prevSession,\n      ...nextSession\n    });\n    setValue(value);\n  }\n\n  async function login({\n    username,\n    password\n  }) {\n    // try to login\n    // let { error,id,data,access_token } = await fetch('http://localhost:8000/api/login', {\n    //     method: \"post\",\n    //     headers: {\n    //         'Content-type': 'application/json'\n    //     },\n    //     body: JSON.stringify({ email, password })\n    // }).then(res => res.json());\n    e.preventDefault();\n    let body = new FormData();\n    body.append(\"username\", username);\n    body.append(\"password\", password);\n    console.log(\"test of login body\");\n    console.log(body);\n\n    try {\n      let res = await fetch(\"http://localhost:3001/login\", {\n        method: \"post\",\n        body\n      });\n      let result = await res.json();\n      console.log(\"result is :\", result);\n\n      if (result.Token) {\n        const options = {\n          path: \"/\"\n        };\n        CookieService.set(\"access_token\", result.access_token, options);\n        CookieService.set(\"Role\", result.data.role, options);\n        CookieService.set(\"UserName\", result.data.username, options);\n        history.push(\"/HomePage\");\n        console.log(result);\n      } else {\n        swal(\"username or password is not correct \", \" \", \"warning\");\n      }\n    } catch (e) {\n      alert(e);\n    } // return from the function if you have an error\n\n\n    if (error || !access_token) return toast.error(error);\n    let user = { ...data,\n      access_token\n    };\n    setCookie('id', id);\n    setCookie('access_token', access_token);\n    setCookie('role', data.role);\n    updateSession({\n      user\n    });\n    toast(`Welcome ${data.username}!`);\n    console.log(session);\n  }\n\n  function logout() {\n    updateSession({\n      user: {\n        access_token: null\n      }\n    });\n    removeCookie('id');\n    removeCookie('access_token');\n  }\n\n  const context = {\n    session,\n    actions: {\n      login,\n      logout\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(SessionContext.Provider, {\n    value: context,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 115,\n    columnNumber: 9\n  }, this);\n}\n\n_s(SessionProvider, \"oDUg32UwzyWCYzu4Vlhfn6f8KxE=\");\n\n_c = SessionProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"SessionProvider\");","map":{"version":3,"sources":["/var/www/html/MechanicalDelevery/react _part/src/Components/session/SessionProvider.js"],"names":["React","useState","useEffect","SessionContext","swal","SessionProvider","children","session","setValue","user","access_token","getCookie","role","initializeSession","id","fetch","headers","then","res","json","data","updateSession","nextSession","value","prevSession","login","username","password","e","preventDefault","body","FormData","append","console","log","method","result","Token","options","path","CookieService","set","history","push","alert","error","toast","setCookie","logout","removeCookie","context","actions"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport SessionContext from './SessionContext';\n// import { setCookie, getCookie, removeCookie } from '../../cookies';\nimport swal from 'sweetalert';\n\nexport default function SessionProvider({ children }) {\n\n    const [session, setValue] = useState({\n        user: {\n            access_token: getCookie('access_token'),\n            role: getCookie('role')\n        }\n    });\n\n    useEffect(() => {\n        function initializeSession() {\n            let id = getCookie('id');\n            let access_token = getCookie('access_token');\n            if (access_token) fetch(`https://reqres.in/api/users/${id}`, {\n                headers: {\n                    'access_token': access_token\n                }\n            }).then(res => res.json()).then(res => {\n                let user = { ...res.data, access_token };\n                updateSession({ user });\n            });\n        }\n        initializeSession();\n    }, []);\n\n    function updateSession(nextSession) {\n        let value = typeof nextSession === \"function\" ?\n            nextSession : prevSession => ({ ...prevSession, ...nextSession });\n        setValue(value);\n    }\n\n    async function login({ username, password }) {\n\n        // try to login\n        // let { error,id,data,access_token } = await fetch('http://localhost:8000/api/login', {\n        //     method: \"post\",\n        //     headers: {\n        //         'Content-type': 'application/json'\n        //     },\n        //     body: JSON.stringify({ email, password })\n        // }).then(res => res.json());\n\n\n\n        e.preventDefault();\n\n        let body = new FormData();\n        body.append(\"username\", username);\n        body.append(\"password\", password);\n\n        console.log(\"test of login body\");\n        console.log(body);\n\n        try {\n            let res = await fetch(\"http://localhost:3001/login\", {\n                method: \"post\",\n                body,\n            });\n            let result = await res.json();\n            console.log(\"result is :\", result);\n\n            if (result.Token) {\n                const options = { path: \"/\" };\n                CookieService.set(\"access_token\", result.access_token, options);\n                CookieService.set(\"Role\", result.data.role, options);\n                CookieService.set(\"UserName\", result.data.username, options);\n                history.push(\"/HomePage\");\n                console.log(result);\n            } else {\n                swal(\"username or password is not correct \", \" \", \"warning\");\n            }\n        } catch (e) {\n            alert(e);\n        }\n\n\n\n\n        // return from the function if you have an error\n        if (error || !access_token) return toast.error(error);\n\n\n\n        let user = { ...data, access_token };\n\n        setCookie('id', id);\n        setCookie('access_token', access_token);\n        setCookie('role', data.role)\n        updateSession({ user });\n        toast(`Welcome ${data.username}!`);\n        console.log(session)\n\n    }\n\n    function logout() {\n        updateSession({ user: { access_token: null } });\n        removeCookie('id');\n        removeCookie('access_token');\n    }\n\n    const context = {\n        session,\n        actions: {\n            login,\n            logout\n        }\n    }\n\n    return (\n        <SessionContext.Provider value={context}>\n            {children}\n        </SessionContext.Provider>\n    )\n}"]},"metadata":{},"sourceType":"module"}