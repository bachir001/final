{"ast":null,"code":"var _jsxFileName = \"/var/www/html/MechanicalDelevery/react _part/src/Components/session/SessionProvider.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { useHistory } from 'react-router';\nimport CookieService from '../../CookieService';\nimport SessionContext from './SessionContext';\nimport swal from 'sweetalert';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function SessionProvider({\n  children\n}) {\n  _s();\n\n  let history = useHistory();\n\n  async function login({\n    username,\n    password\n  }) {\n    try {\n      let res = await fetch(\"http://localhost:3001/users/login\", {\n        method: \"post\",\n        headers: {\n          'Content-type': 'application/json'\n        },\n        body: JSON.stringify({\n          username,\n          password\n        })\n      });\n      let result = await res.json();\n      console.log(\"result is :\", result);\n\n      if (result.Token) {\n        const options = {\n          path: '/'\n        };\n        CookieService.set('Token', result.Token, options);\n        CookieService.set('_id', result._id, options);\n        CookieService.set('Role', result.Role, options);\n        history.push('/');\n      } else {\n        swal(\"username or password is not correct \", \" \", \"warning\");\n      }\n    } catch (e) {\n      alert(e);\n    }\n  }\n\n  async function logout(id) {\n    try {\n      let res = await fetch(`http://localhost:3001/users/logout/${id}`, {\n        method: \"post\"\n      });\n      let result = await res.json();\n      console.log(\"result is :\", result);\n    } catch (e) {\n      alert(e);\n    }\n  }\n\n  const context = {\n    actions: {\n      login,\n      logout\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(SessionContext.Provider, {\n    value: context,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 67,\n    columnNumber: 9\n  }, this);\n}\n\n_s(SessionProvider, \"9cZfZ04734qoCGIctmKX7+sX6eU=\", false, function () {\n  return [useHistory];\n});\n\n_c = SessionProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"SessionProvider\");","map":{"version":3,"sources":["/var/www/html/MechanicalDelevery/react _part/src/Components/session/SessionProvider.js"],"names":["React","useState","useHistory","CookieService","SessionContext","swal","SessionProvider","children","history","login","username","password","res","fetch","method","headers","body","JSON","stringify","result","json","console","log","Token","options","path","set","_id","Role","push","e","alert","logout","id","context","actions"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAiC,OAAjC;AACA,SAASC,UAAT,QAA2B,cAA3B;AACA,OAAOC,aAAP,MAA0B,qBAA1B;AACA,OAAOC,cAAP,MAA2B,kBAA3B;AACA,OAAOC,IAAP,MAAiB,YAAjB;;AAEA,eAAe,SAASC,eAAT,CAAyB;AAAEC,EAAAA;AAAF,CAAzB,EAAuC;AAAA;;AAElD,MAAIC,OAAO,GAAGN,UAAU,EAAxB;;AAGA,iBAAeO,KAAf,CAAqB;AAAEC,IAAAA,QAAF;AAAYC,IAAAA;AAAZ,GAArB,EAA6C;AAGzC,QAAI;AAEA,UAAIC,GAAG,GAAG,MAAMC,KAAK,CAAC,mCAAD,EAAsC;AACvDC,QAAAA,MAAM,EAAE,MAD+C;AAEvDC,QAAAA,OAAO,EAAE;AACL,0BAAgB;AADX,SAF8C;AAKvDC,QAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AAAER,UAAAA,QAAF;AAAYC,UAAAA;AAAZ,SAAf;AALiD,OAAtC,CAArB;AAQA,UAAIQ,MAAM,GAAG,MAAMP,GAAG,CAACQ,IAAJ,EAAnB;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ,EAA2BH,MAA3B;;AACA,UAAIA,MAAM,CAACI,KAAX,EAAkB;AACd,cAAMC,OAAO,GAAG;AAAEC,UAAAA,IAAI,EAAE;AAAR,SAAhB;AACAtB,QAAAA,aAAa,CAACuB,GAAd,CAAkB,OAAlB,EAA2BP,MAAM,CAACI,KAAlC,EAAyCC,OAAzC;AACArB,QAAAA,aAAa,CAACuB,GAAd,CAAkB,KAAlB,EAAyBP,MAAM,CAACQ,GAAhC,EAAqCH,OAArC;AACArB,QAAAA,aAAa,CAACuB,GAAd,CAAkB,MAAlB,EAA0BP,MAAM,CAACS,IAAjC,EAAuCJ,OAAvC;AACAhB,QAAAA,OAAO,CAACqB,IAAR,CAAa,GAAb;AACH,OAND,MAMO;AACHxB,QAAAA,IAAI,CAAC,sCAAD,EAAyC,GAAzC,EAA8C,SAA9C,CAAJ;AACH;AACJ,KArBD,CAqBE,OAAOyB,CAAP,EAAU;AACRC,MAAAA,KAAK,CAACD,CAAD,CAAL;AACH;AAEJ;;AAKD,iBAAeE,MAAf,CAAsBC,EAAtB,EAA0B;AAEtB,QAAI;AACA,UAAIrB,GAAG,GAAG,MAAMC,KAAK,CAAE,sCAAqCoB,EAAG,EAA1C,EAA6C;AAC9DnB,QAAAA,MAAM,EAAE;AADsD,OAA7C,CAArB;AAGA,UAAIK,MAAM,GAAG,MAAMP,GAAG,CAACQ,IAAJ,EAAnB;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ,EAA2BH,MAA3B;AACH,KAND,CAME,OAAOW,CAAP,EAAU;AACRC,MAAAA,KAAK,CAACD,CAAD,CAAL;AACH;AAEJ;;AAED,QAAMI,OAAO,GAAG;AACZC,IAAAA,OAAO,EAAE;AACL1B,MAAAA,KADK;AAELuB,MAAAA;AAFK;AADG,GAAhB;AAOA,sBACI,QAAC,cAAD,CAAgB,QAAhB;AAAyB,IAAA,KAAK,EAAEE,OAAhC;AAAA,cACK3B;AADL;AAAA;AAAA;AAAA;AAAA,UADJ;AAKH;;GAhEuBD,e;UAENJ,U;;;KAFMI,e","sourcesContent":["import React, { useState, } from 'react';\nimport { useHistory } from 'react-router';\nimport CookieService from '../../CookieService';\nimport SessionContext from './SessionContext';\nimport swal from 'sweetalert';\n\nexport default function SessionProvider({ children }) {\n\n    let history = useHistory();\n\n\n    async function login({ username, password }) {\n\n\n        try {\n\n            let res = await fetch(\"http://localhost:3001/users/login\", {\n                method: \"post\",\n                headers: {\n                    'Content-type': 'application/json'\n                },\n                body: JSON.stringify({ username, password })\n\n            });\n            let result = await res.json();\n            console.log(\"result is :\", result);\n            if (result.Token) {\n                const options = { path: '/', };\n                CookieService.set('Token', result.Token, options);\n                CookieService.set('_id', result._id, options);\n                CookieService.set('Role', result.Role, options);\n                history.push('/');\n            } else {\n                swal(\"username or password is not correct \", \" \", \"warning\");\n            }\n        } catch (e) {\n            alert(e);\n        }\n\n    }\n\n    \n\n     \n    async function logout(id) {\n\n        try {\n            let res = await fetch(`http://localhost:3001/users/logout/${id}`, {\n                method: \"post\",\n            });\n            let result = await res.json();\n            console.log(\"result is :\", result);\n        } catch (e) {\n            alert(e);\n        }\n\n    }\n\n    const context = {\n        actions: {\n            login,\n            logout\n        }\n    }\n\n    return (\n        <SessionContext.Provider value={context}>\n            {children}\n        </SessionContext.Provider>\n    )\n}"]},"metadata":{},"sourceType":"module"}