{"ast":null,"code":"var _jsxFileName = \"/var/www/html/MechanicalDelevery/react _part/src/Components/session/SessionProvider.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport SessionContext from './SessionContext';\nimport swal from 'sweetalert';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function SessionProvider({\n  children\n}) {\n  _s();\n\n  // const [session, setValue] = useState({\n  //     user: {\n  //         access_token: getCookie('access_token'),\n  //         role: getCookie('role')\n  //     }\n  // });\n  useEffect(() => {\n    function initializeSession() {\n      let id = getCookie('id');\n      let access_token = getCookie('access_token');\n      if (access_token) fetch(`https://reqres.in/api/users/${id}`, {\n        headers: {\n          'access_token': access_token\n        }\n      }).then(res => res.json()).then(res => {\n        let user = { ...res.data,\n          access_token\n        };\n        updateSession({\n          user\n        });\n      });\n    }\n\n    initializeSession();\n  }, []);\n\n  function updateSession(nextSession) {\n    let value = typeof nextSession === \"function\" ? nextSession : prevSession => ({ ...prevSession,\n      ...nextSession\n    });\n    setValue(value);\n  }\n\n  async function login({\n    username,\n    password\n  }) {\n    e.preventDefault();\n    let body = new FormData();\n    body.append(\"username\", username);\n    body.append(\"password\", password);\n    console.log(\"test of login body\");\n    console.log(body);\n\n    try {\n      let res = await fetch(\"http://localhost:3001/login\", {\n        method: \"post\",\n        body\n      });\n      let result = await res.json();\n      console.log(\"result is :\", result);\n\n      if (result.Token) {\n        const options = {\n          path: \"/\"\n        };\n        setToken(result.Token);\n        setRole(result.Role);\n        setId(res); // CookieService.set(\"access_token\", result.access_token, options);\n\n        CookieService.set(\"Role\", result.data.role, options);\n        CookieService.set(\"UserName\", result.data.username, options);\n        history.push(\"/HomePage\");\n        console.log(result);\n      } else {\n        swal(\"username or password is not correct \", \" \", \"warning\");\n      }\n    } catch (e) {\n      alert(e);\n    } // return from the function if you have an error\n\n\n    if (error || !access_token) return toast.error(error);\n    let user = { ...data,\n      access_token\n    };\n    setCookie('id', id);\n    setCookie('access_token', access_token);\n    setCookie('role', data.role);\n    updateSession({\n      user\n    });\n    toast(`Welcome ${data.username}!`);\n    console.log(session);\n  }\n\n  function logout() {\n    updateSession({\n      user: {\n        access_token: null\n      }\n    });\n    removeCookie('id');\n    removeCookie('access_token');\n  }\n\n  const context = {\n    session,\n    actions: {\n      login,\n      logout\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(SessionContext.Provider, {\n    value: context,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 107,\n    columnNumber: 9\n  }, this);\n}\n\n_s(SessionProvider, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n\n_c = SessionProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"SessionProvider\");","map":{"version":3,"sources":["/var/www/html/MechanicalDelevery/react _part/src/Components/session/SessionProvider.js"],"names":["React","useState","useEffect","SessionContext","swal","SessionProvider","children","initializeSession","id","getCookie","access_token","fetch","headers","then","res","json","user","data","updateSession","nextSession","value","prevSession","setValue","login","username","password","e","preventDefault","body","FormData","append","console","log","method","result","Token","options","path","setToken","setRole","Role","setId","CookieService","set","role","history","push","alert","error","toast","setCookie","session","logout","removeCookie","context","actions"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport SessionContext from './SessionContext';\nimport swal from 'sweetalert';\n\nexport default function SessionProvider({ children }) {\n\n    // const [session, setValue] = useState({\n    //     user: {\n    //         access_token: getCookie('access_token'),\n    //         role: getCookie('role')\n    //     }\n    // });\n\n    useEffect(() => {\n\n        function initializeSession() {\n            let id = getCookie('id');\n            let access_token = getCookie('access_token');\n            if (access_token) fetch(`https://reqres.in/api/users/${id}`, {\n                headers: {\n                    'access_token': access_token\n                }\n            }).then(res => res.json()).then(res => {\n                let user = { ...res.data, access_token };\n                updateSession({ user });\n            });\n        }\n        initializeSession();\n    }, []);\n\n    function updateSession(nextSession) {\n        let value = typeof nextSession === \"function\" ?\n            nextSession : prevSession => ({ ...prevSession, ...nextSession });\n        setValue(value);\n    }\n\n    async function login({ username, password }) {\n\n        e.preventDefault();\n\n        let body = new FormData();\n        body.append(\"username\", username);\n        body.append(\"password\", password);\n\n        console.log(\"test of login body\");\n        console.log(body);\n\n        try {\n            let res = await fetch(\"http://localhost:3001/login\", {\n                method: \"post\",\n                body,\n            });\n            let result = await res.json();\n            console.log(\"result is :\", result);\n\n            if (result.Token) {\n                const options = { path: \"/\" };\n                setToken(result.Token);\n                setRole(result.Role);\n                setId(res)\n                // CookieService.set(\"access_token\", result.access_token, options);\n                CookieService.set(\"Role\", result.data.role, options);\n                CookieService.set(\"UserName\", result.data.username, options);\n                history.push(\"/HomePage\");\n                console.log(result);\n            } else {\n                swal(\"username or password is not correct \", \" \", \"warning\");\n            }\n        } catch (e) {\n            alert(e);\n        }\n\n\n\n\n        // return from the function if you have an error\n        if (error || !access_token) return toast.error(error);\n\n\n\n        let user = { ...data, access_token };\n\n        setCookie('id', id);\n        setCookie('access_token', access_token);\n        setCookie('role', data.role)\n        updateSession({ user });\n        toast(`Welcome ${data.username}!`);\n        console.log(session)\n\n    }\n\n    function logout() {\n        updateSession({ user: { access_token: null } });\n        removeCookie('id');\n        removeCookie('access_token');\n    }\n\n    const context = {\n        session,\n        actions: {\n            login,\n            logout\n        }\n    }\n\n    return (\n        <SessionContext.Provider value={context}>\n            {children}\n        </SessionContext.Provider>\n    )\n}"]},"metadata":{},"sourceType":"module"}